// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineAdvising.Data;

namespace OnlineAdvicing.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeEnded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentStatusId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstMessageSentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.DayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DaysOfWeek");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.PsychologistSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PsychologistId");

                    b.ToTable("PsychologistSchedules");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("RateValue")
                        .HasColumnType("float");

                    b.Property<int?>("RatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RatedId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportedId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Psychologist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Patient"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.ScheduleDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DayOfWeekId")
                        .HasColumnType("int");

                    b.Property<int>("EndHour")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("StartHour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeekId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDays");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Declined"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        });
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountStatusId = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient.user@email.com",
                            FirstName = "Patient",
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "User",
                            PasswordHash = "69E45613E534DAB256A77929D08C579E7025FC8CA2D48C86898556AF54E460FB",
                            RoleId = 2,
                            Username = "patient.user"
                        },
                        new
                        {
                            Id = 2,
                            AccountStatusId = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "psychologist.user@email.com",
                            FirstName = "Psychologist",
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "User",
                            PasswordHash = "69E45613E534DAB256A77929D08C579E7025FC8CA2D48C86898556AF54E460FB",
                            RoleId = 1,
                            Username = "psychologist.user"
                        },
                        new
                        {
                            Id = 3,
                            AccountStatusId = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin.user@email.com",
                            FirstName = "Admin",
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "User",
                            PasswordHash = "69E45613E534DAB256A77929D08C579E7025FC8CA2D48C86898556AF54E460FB",
                            RoleId = 3,
                            Username = "admin.user"
                        });
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.UserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Value")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("OnlineAdvising.Data.ProcedureModels.AdminDashboardPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesReported")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AdminDashboardPatients");
                });

            modelBuilder.Entity("OnlineAdvising.Data.ProcedureModels.AdminDashboardPsychologist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoursServed")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentsHelped")
                        .HasColumnType("int");

                    b.Property<int>("TimesReported")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AdminDashboardPsychologists");
                });

            modelBuilder.Entity("OnlineAdvising.Data.ProcedureModels.PsychologistDashboard", b =>
                {
                    b.Property<int>("PsychologistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("int");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HoursServed")
                        .HasColumnType("int");

                    b.Property<int?>("StudentsHelped")
                        .HasColumnType("int");

                    b.HasKey("PsychologistId");

                    b.ToTable("PsychologistDashboard");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Patient", b =>
                {
                    b.HasBaseType("OnlineAdvising.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Psychologist", b =>
                {
                    b.HasBaseType("OnlineAdvising.Data.Entities.User");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Psychologist");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Appointment", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.Status", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("AppointmentStatusId");

                    b.HasOne("OnlineAdvising.Data.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("OnlineAdvising.Data.Entities.User", "Psychologist")
                        .WithMany()
                        .HasForeignKey("PsychologistId");

                    b.Navigation("AppointmentStatus");

                    b.Navigation("Patient");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Chat", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Message", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId");

                    b.HasOne("OnlineAdvising.Data.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("OnlineAdvising.Data.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.PsychologistSchedule", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.User", "Psychologist")
                        .WithMany()
                        .HasForeignKey("PsychologistId");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Rate", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.User", "Rated")
                        .WithMany()
                        .HasForeignKey("RatedId");

                    b.Navigation("Rated");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.Report", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.User", "Reported")
                        .WithMany()
                        .HasForeignKey("ReportedId");

                    b.Navigation("Reported");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.ScheduleDay", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.DayOfWeek", "DayOfWeek")
                        .WithMany()
                        .HasForeignKey("DayOfWeekId");

                    b.HasOne("OnlineAdvising.Data.Entities.PsychologistSchedule", "Schedule")
                        .WithMany("ScheduleDays")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("DayOfWeek");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.User", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.Status", "AccountStatus")
                        .WithMany()
                        .HasForeignKey("AccountStatusId");

                    b.HasOne("OnlineAdvising.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("AccountStatus");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.UserFile", b =>
                {
                    b.HasOne("OnlineAdvising.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAdvising.Data.Entities.PsychologistSchedule", b =>
                {
                    b.Navigation("ScheduleDays");
                });
#pragma warning restore 612, 618
        }
    }
}
